{"meta":{"title":"QSH's blog","subtitle":"","description":"心如花木，向阳而生","author":"QSH","url":"http://miracle-qsh.github.io","root":"/"},"pages":[{"title":"我的朋友们","date":"2020-01-28T04:30:27.579Z","updated":"2020-01-13T03:47:06.231Z","comments":true,"path":"friends/index.html","permalink":"http://miracle-qsh.github.io/friends/index.html","excerpt":"","text":"这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"项目列表","date":"2020-01-28T04:30:27.579Z","updated":"2020-01-13T03:50:47.677Z","comments":true,"path":"mylist/index.html","permalink":"http://miracle-qsh.github.io/mylist/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-01-28T04:30:27.579Z","updated":"2020-01-13T03:44:53.405Z","comments":true,"path":"categories/index.html","permalink":"http://miracle-qsh.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-01-28T04:30:27.579Z","updated":"2020-01-13T06:18:33.452Z","comments":true,"path":"tags/index.html","permalink":"http://miracle-qsh.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"各层作用及协议","slug":"各层作用及协议","date":"2020-02-01T07:02:10.119Z","updated":"2020-02-01T07:03:40.012Z","comments":true,"path":"2020/02/01/各层作用及协议/","link":"","permalink":"http://miracle-qsh.github.io/2020/02/01/%E5%90%84%E5%B1%82%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%8D%8F%E8%AE%AE/","excerpt":"用于回顾各层作用及协议","text":"用于回顾各层作用及协议 计算机网络体系结构 各层作用及协议 分层 作用 协议 物理层 通过媒介传输比特，确定机械及电器规范（比特Bit） RJ45、CLOCK、IEEE802.3（中继器，集线器） 数据链路层 将比特组装成帧和点到点传递（帧Frame） PPP、FR、HDLC、VLAN、MAC（网桥，交换机） 网络层 负责数据包从源到宿的传递和网际互连（包Packet） IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP（路由器） 运输层 提供端到端的可靠报文传递和错误恢复（段Segment） TCP、UDP、SPX 会话层 建立、管理和终止会话（会话协议数据单元SPDU） NFS、SQL、NETBIOS、RPC 表示层 对数据进行翻译加密和压缩（表示协议数据单元PPDU） JPEG、MPEG、ASII 应用层 允许访问OSI环境的手段（应用协议数据单元APDU） FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://miracle-qsh.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://miracle-qsh.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://miracle-qsh.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"操作系统概述","slug":"操作系统概述","date":"2020-02-01T06:58:51.712Z","updated":"2020-02-01T07:01:04.125Z","comments":true,"path":"2020/02/01/操作系统概述/","link":"","permalink":"http://miracle-qsh.github.io/2020/02/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/","excerpt":"用于回顾操作系统概述","text":"用于回顾操作系统概述 基本特征并发并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。 并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。 操作系统通过引入进程和线程，使得程序能够并发运行。 共享共享是指系统中的资源可以被多个并发进程共同使用。 有两种共享方式：互斥共享和同时共享。 互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。 虚拟虚拟技术把一个物理实体转换为多个逻辑实体。 主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。 多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。 虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。 异步异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。 基本功能进程管理进程控制、进程同步、进程通信、死锁处理、处理机调度等。 内存管理内存分配、地址映射、内存保护与共享、虚拟内存等。 文件管理文件存储空间的管理、目录管理、文件读写管理和保护等。 设备管理完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。 主要包括缓冲管理、设备分配、设备处理、虛拟设备等。 系统调用如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。 大内核和微内核大内核大内核是将操作系统功能作为一个紧密结合的整体放到内核。 由于各模块共享信息，因此有很高的性能。 微内核由于操作系统不断复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立。 在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。 因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。 中断分类外中断由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。 异常由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。 陷入在用户程序中使用系统调用。 参考资料[cyc2018笔记](","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://miracle-qsh.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://miracle-qsh.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"操作系统","slug":"操作系统","permalink":"http://miracle-qsh.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}]},{"title":"C++中的引用、const、动态内存分配","slug":"C++中的引用、const、动态内存分配","date":"2020-02-01T06:19:10.867Z","updated":"2020-02-01T07:01:23.710Z","comments":true,"path":"2020/02/01/C++中的引用、const、动态内存分配/","link":"","permalink":"http://miracle-qsh.github.io/2020/02/01/C++%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E3%80%81const%E3%80%81%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/","excerpt":"用于回顾C++中的引用、const、动态内存分配","text":"用于回顾C++中的引用、const、动态内存分配 引用某个变量的引用，等价于这个变量，相当于这个变量的别名，例如 1int &amp;r = n; 引用的特点 定义引用时必须初始化 不可赋值与修改 只能引用变量，不能引用常量和表达式 函数的引用1int &amp; A()&#123;return n;&#125;2//等价于n的引用 常引用不可改变的引用，但可通过被引用对象修改内容 1const int &amp;r = n;2r = 100; // 错误3n = 100; //正确 常引用和非常引用的转换 T &amp;类型的引用或T类型的变量可以用来初始化const T &amp;类型的引用 const T &amp;类型的引用和const T类型的变量不能用来初始化T &amp;类型的引用，除非进行强制类型转换 const定义常量1const int MAX = 0x3f3f3f; 定义常量指针 不可通过常量指针修改指向的内容 1int n;2const int *p = &amp;n;3*p = 100; //错误4n = 100; //正确 不能把常量指针赋值给非常量指针，反之可以 定义常引用动态内存分配用new运算符实现动态内存分配 动态分配一个变量的存储空间 1P = new T;2// T是任意类型名，P是类型为T*的指针 动态分配一个数组 1P = new T[N];2// T是任意类型名，P是类型为T*的指针，N为数组元素个数 用delete运算符释放动态内存分配 delete 必须指向new出来的空间 1delete p; 一片空间不能被delete多次 delete数组要在指针前加[] 1delete []p;","categories":[{"name":"C/C++","slug":"C-C","permalink":"http://miracle-qsh.github.io/categories/C-C/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://miracle-qsh.github.io/tags/C-C/"},{"name":"笔记","slug":"笔记","permalink":"http://miracle-qsh.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"C语言知识回顾","slug":"C语言知识回顾","date":"2020-01-31T06:22:11.474Z","updated":"2020-02-01T07:01:31.696Z","comments":true,"path":"2020/01/31/C语言知识回顾/","link":"","permalink":"http://miracle-qsh.github.io/2020/01/31/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/","excerpt":"用于回顾C语言中比较复杂与困难的知识点","text":"用于回顾C语言中比较复杂与困难的知识点 函数指针程序运行期间，每个函数都会占用一段连续内存空间，函数名为入口地址，指向函数入口地址的指针变量成为“函数指针” 命令行参数cmd窗口中以空格隔开的一行命令为命令行参数，例如： 1copy file1.txt file2.txt 其中“copy”，“file1.txt”，“file2.txt”为命令行参数 在C程序中表现为 1int main(int argc, char *argv[])&#123;2 // 函数体3&#125; 其中argc为命令行参数个数，*argv[]为参数列表（字符串） 位运算 运算符 功能 &amp; 按位与（双目） | 按位或（双目） ^ 按位异或（双目） ~ 按位取反（单目） &lt;&lt; 左移（双目） &gt;&gt; 右移（双目）","categories":[{"name":"C/C++","slug":"C-C","permalink":"http://miracle-qsh.github.io/categories/C-C/"}],"tags":[{"name":"C/C++","slug":"C-C","permalink":"http://miracle-qsh.github.io/tags/C-C/"},{"name":"笔记","slug":"笔记","permalink":"http://miracle-qsh.github.io/tags/%E7%AC%94%E8%AE%B0/"}]},{"title":"面试学习资料汇总","slug":"面试学习资料汇总","date":"2020-01-14T11:09:14.235Z","updated":"2020-01-14T12:33:01.098Z","comments":true,"path":"2020/01/14/面试学习资料汇总/","link":"","permalink":"http://miracle-qsh.github.io/2020/01/14/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/","excerpt":"用于记录准备面试过程中各类学习资料","text":"用于记录准备面试过程中各类学习资料 面试学习资料汇总CyC 2018 笔记传送链接 牛客面试题汇总传送链接","categories":[{"name":"面试题","slug":"面试题","permalink":"http://miracle-qsh.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"http://miracle-qsh.github.io/tags/%E7%AC%94%E8%AE%B0/"},{"name":"面试","slug":"面试","permalink":"http://miracle-qsh.github.io/tags/%E9%9D%A2%E8%AF%95/"},{"name":"整理","slug":"整理","permalink":"http://miracle-qsh.github.io/tags/%E6%95%B4%E7%90%86/"}]},{"title":"剑指offer&&Leetcode源码","slug":"算法刷题","date":"2020-01-14T03:13:47.410Z","updated":"2020-01-14T03:13:47.411Z","comments":true,"path":"2020/01/14/算法刷题/","link":"","permalink":"http://miracle-qsh.github.io/2020/01/14/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/","excerpt":"用于记录面试准备过程中算法与数据结构部分的刷题","text":"用于记录面试准备过程中算法与数据结构部分的刷题 Github 地址https://github.com/miracle-qsh/algorithm","categories":[{"name":"算法","slug":"算法","permalink":"http://miracle-qsh.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://miracle-qsh.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"面试","slug":"面试","permalink":"http://miracle-qsh.github.io/tags/%E9%9D%A2%E8%AF%95/"}]}]}