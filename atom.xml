<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QSH&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://miracle-qsh.github.io/"/>
  <updated>2020-02-01T07:03:40.012Z</updated>
  <id>http://miracle-qsh.github.io/</id>
  
  <author>
    <name>QSH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>各层作用及协议</title>
    <link href="http://miracle-qsh.github.io/2020/02/01/%E5%90%84%E5%B1%82%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%8D%8F%E8%AE%AE/"/>
    <id>http://miracle-qsh.github.io/2020/02/01/%E5%90%84%E5%B1%82%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%8D%8F%E8%AE%AE/</id>
    <published>2020-02-01T07:02:10.119Z</published>
    <updated>2020-02-01T07:03:40.012Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 用于回顾各层作用及协议</p><a id="more"></a><h3 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h3><p><img src="https://i.loli.net/2020/02/01/7bakEsP429R8YdH.png" alt=""></p><h3 id="各层作用及协议"><a href="#各层作用及协议" class="headerlink" title="各层作用及协议"></a>各层作用及协议</h3><table><thead><tr><th>分层</th><th>作用</th><th>协议</th></tr></thead><tbody><tr><td>物理层</td><td>通过媒介传输比特，确定机械及电器规范（比特Bit）</td><td>RJ45、CLOCK、IEEE802.3（中继器，集线器）</td></tr><tr><td>数据链路层</td><td>将比特组装成帧和点到点传递（帧Frame）</td><td>PPP、FR、HDLC、VLAN、MAC（网桥，交换机）</td></tr><tr><td>网络层</td><td>负责数据包从源到宿的传递和网际互连（包Packet）</td><td>IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP（路由器）</td></tr><tr><td>运输层</td><td>提供端到端的可靠报文传递和错误恢复（段Segment）</td><td>TCP、UDP、SPX</td></tr><tr><td>会话层</td><td>建立、管理和终止会话（会话协议数据单元SPDU）</td><td>NFS、SQL、NETBIOS、RPC</td></tr><tr><td>表示层</td><td>对数据进行翻译加密和压缩（表示协议数据单元PPDU）</td><td>JPEG、MPEG、ASII</td></tr><tr><td>应用层</td><td>允许访问OSI环境的手段（应用协议数据单元APDU）</td><td>FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 用于回顾各层作用及协议&lt;/p&gt;
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://miracle-qsh.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="笔记" scheme="http://miracle-qsh.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="计算机网络" scheme="http://miracle-qsh.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>操作系统概述</title>
    <link href="http://miracle-qsh.github.io/2020/02/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/"/>
    <id>http://miracle-qsh.github.io/2020/02/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</id>
    <published>2020-02-01T06:58:51.712Z</published>
    <updated>2020-02-01T07:01:04.125Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 用于回顾操作系统概述</p><a id="more"></a><h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。</p><p>并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统。</p><p>操作系统通过引入进程和线程，使得程序能够并发运行。</p><h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><p>共享是指系统中的资源可以被多个并发进程共同使用。</p><p>有两种共享方式：互斥共享和同时共享。</p><p>互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。</p><h4 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h4><p>虚拟技术把一个物理实体转换为多个逻辑实体。</p><p>主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。</p><p>多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。</p><p>虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间。地址空间的页被映射到物理内存，地址空间的页并不需要全部在物理内存中，当使用到一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。</p><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。</p><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><p>进程控制、进程同步、进程通信、死锁处理、处理机调度等。</p><h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h4><p>内存分配、地址映射、内存保护与共享、虚拟内存等。</p><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p>文件存储空间的管理、目录管理、文件读写管理和保护等。</p><h4 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h4><p>完成用户的 I/O 请求，方便用户使用各种设备，并提高设备的利用率。</p><p>主要包括缓冲管理、设备分配、设备处理、虛拟设备等。</p><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/tGPV0.png" alt=""></p><h3 id="大内核和微内核"><a href="#大内核和微内核" class="headerlink" title="大内核和微内核"></a>大内核和微内核</h3><h4 id="大内核"><a href="#大内核" class="headerlink" title="大内核"></a>大内核</h4><p>大内核是将操作系统功能作为一个紧密结合的整体放到内核。</p><p>由于各模块共享信息，因此有很高的性能。</p><h4 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h4><p>由于操作系统不断复杂，因此将一部分操作系统功能移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立。</p><p>在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。</p><p>因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。</p><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2_14_microkernelArchitecture.jpg" alt=""></p><h3 id="中断分类"><a href="#中断分类" class="headerlink" title="中断分类"></a>中断分类</h3><h4 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h4><p>由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。</p><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。</p><h4 id="陷入"><a href="#陷入" class="headerlink" title="陷入"></a>陷入</h4><p>在用户程序中使用系统调用。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>[cyc2018笔记](</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 用于回顾操作系统概述&lt;/p&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://miracle-qsh.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="笔记" scheme="http://miracle-qsh.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="http://miracle-qsh.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>C++中的引用、const、动态内存分配</title>
    <link href="http://miracle-qsh.github.io/2020/02/01/C++%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E3%80%81const%E3%80%81%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    <id>http://miracle-qsh.github.io/2020/02/01/C++%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%E3%80%81const%E3%80%81%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</id>
    <published>2020-02-01T06:19:10.867Z</published>
    <updated>2020-02-01T07:01:23.710Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 用于回顾C++中的引用、const、动态内存分配</p><a id="more"></a><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>某个变量的引用，等价于这个变量，相当于这个变量的别名，例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> &amp;r = n;</span></pre></td></tr></table></figure><h4 id="引用的特点"><a href="#引用的特点" class="headerlink" title="引用的特点"></a>引用的特点</h4><ul><li>定义引用时必须初始化</li><li>不可赋值与修改</li><li>只能引用变量，不能引用常量和表达式</li></ul><h4 id="函数的引用"><a href="#函数的引用" class="headerlink" title="函数的引用"></a>函数的引用</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">A</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> n;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于n的引用</span></span></pre></td></tr></table></figure><h4 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h4><p>不可改变的引用，但可通过被引用对象修改内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;r = n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">r = <span class="number">100</span>; <span class="comment">// 错误</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">n = <span class="number">100</span>; <span class="comment">//正确</span></span></pre></td></tr></table></figure><h4 id="常引用和非常引用的转换"><a href="#常引用和非常引用的转换" class="headerlink" title="常引用和非常引用的转换"></a>常引用和非常引用的转换</h4><ul><li>T &amp;类型的引用或T类型的变量可以用来初始化const T &amp;类型的引用</li><li>const T &amp;类型的引用和const T类型的变量不能用来初始化T &amp;类型的引用，除非进行强制类型转换</li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><h4 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">0x3f3f3f</span>;</span></pre></td></tr></table></figure><h4 id="定义常量指针"><a href="#定义常量指针" class="headerlink" title="定义常量指针"></a>定义常量指针</h4><ul><li>不可通过常量指针修改指向的内容</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p = &amp;n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">*p = <span class="number">100</span>; <span class="comment">//错误</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">n = <span class="number">100</span>; <span class="comment">//正确</span></span></pre></td></tr></table></figure><ul><li>不能把常量指针赋值给非常量指针，反之可以</li></ul><h4 id="定义常引用"><a href="#定义常引用" class="headerlink" title="定义常引用"></a>定义常引用</h4><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><h4 id="用new运算符实现动态内存分配"><a href="#用new运算符实现动态内存分配" class="headerlink" title="用new运算符实现动态内存分配"></a>用new运算符实现动态内存分配</h4><ul><li><p>动态分配一个变量的存储空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">P = <span class="keyword">new</span> T;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// T是任意类型名，P是类型为T*的指针</span></span></pre></td></tr></table></figure></li><li><p>动态分配一个数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">P = <span class="keyword">new</span> T[N];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// T是任意类型名，P是类型为T*的指针，N为数组元素个数</span></span></pre></td></tr></table></figure></li></ul><h4 id="用delete运算符释放动态内存分配"><a href="#用delete运算符释放动态内存分配" class="headerlink" title="用delete运算符释放动态内存分配"></a>用delete运算符释放动态内存分配</h4><ul><li><p>delete 必须指向new出来的空间</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> p;</span></pre></td></tr></table></figure></li><li><p>一片空间不能被delete多次</p></li><li><p>delete数组要在指针前加[]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> []p;</span></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 用于回顾C++中的引用、const、动态内存分配&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="http://miracle-qsh.github.io/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://miracle-qsh.github.io/tags/C-C/"/>
    
      <category term="笔记" scheme="http://miracle-qsh.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C语言知识回顾</title>
    <link href="http://miracle-qsh.github.io/2020/01/31/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"/>
    <id>http://miracle-qsh.github.io/2020/01/31/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/</id>
    <published>2020-01-31T06:22:11.474Z</published>
    <updated>2020-02-01T07:01:31.696Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 用于回顾C语言中比较复杂与困难的知识点</p><a id="more"></a><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>程序运行期间，每个函数都会占用一段连续内存空间，函数名为入口地址，指向函数入口地址的指针变量成为“函数指针”</p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>cmd窗口中以空格隔开的一行命令为命令行参数，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">copy file1.txt file2.txt</span></pre></td></tr></table></figure><p>其中“copy”，“file1.txt”，“file2.txt”为命令行参数</p><p>在C程序中表现为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 函数体</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><p>其中argc为命令行参数个数，*argv[]为参数列表（字符串）</p><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><table><thead><tr><th>运算符</th><th>功能</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与（双目）</td></tr><tr><td>|</td><td>按位或（双目）</td></tr><tr><td>^</td><td>按位异或（双目）</td></tr><tr><td>~</td><td>按位取反（单目）</td></tr><tr><td>&lt;&lt;</td><td>左移（双目）</td></tr><tr><td>&gt;&gt;</td><td>右移（双目）</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 用于回顾C语言中比较复杂与困难的知识点&lt;/p&gt;
    
    </summary>
    
    
      <category term="C/C++" scheme="http://miracle-qsh.github.io/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://miracle-qsh.github.io/tags/C-C/"/>
    
      <category term="笔记" scheme="http://miracle-qsh.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>面试学习资料汇总</title>
    <link href="http://miracle-qsh.github.io/2020/01/14/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/"/>
    <id>http://miracle-qsh.github.io/2020/01/14/%E9%9D%A2%E8%AF%95%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%B1%87%E6%80%BB/</id>
    <published>2020-01-14T11:09:14.235Z</published>
    <updated>2020-01-14T12:33:01.098Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用于记录准备面试过程中各类学习资料</p><a id="more"></a><h2 id="面试学习资料汇总"><a href="#面试学习资料汇总" class="headerlink" title="面试学习资料汇总"></a>面试学习资料汇总</h2><h3 id="CyC-2018-笔记"><a href="#CyC-2018-笔记" class="headerlink" title="CyC 2018 笔记"></a>CyC 2018 笔记</h3><p><a href="https://cyc2018.github.io/CS-Notes/#/" target="_blank" rel="noopener">传送链接</a></p><h3 id="牛客面试题汇总"><a href="#牛客面试题汇总" class="headerlink" title="牛客面试题汇总"></a>牛客面试题汇总</h3><p><a href="https://www.nowcoder.com/tutorial/93/8ba2828006dd42879f3a9029eabde9f1" target="_blank" rel="noopener">传送链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用于记录准备面试过程中各类学习资料&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试题" scheme="http://miracle-qsh.github.io/categories/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="笔记" scheme="http://miracle-qsh.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="面试" scheme="http://miracle-qsh.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="整理" scheme="http://miracle-qsh.github.io/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer&amp;&amp;Leetcode源码</title>
    <link href="http://miracle-qsh.github.io/2020/01/14/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/"/>
    <id>http://miracle-qsh.github.io/2020/01/14/%E7%AE%97%E6%B3%95%E5%88%B7%E9%A2%98/</id>
    <published>2020-01-14T03:13:47.410Z</published>
    <updated>2020-01-14T03:13:47.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>用于记录面试准备过程中算法与数据结构部分的刷题</p><a id="more"></a><h2 id="Github-地址"><a href="#Github-地址" class="headerlink" title="Github 地址"></a>Github 地址</h2><p><a href="https://github.com/miracle-qsh/algorithm" target="_blank" rel="noopener">https://github.com/miracle-qsh/algorithm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用于记录面试准备过程中算法与数据结构部分的刷题&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://miracle-qsh.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://miracle-qsh.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="面试" scheme="http://miracle-qsh.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
